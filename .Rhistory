addPolylines(data=add_fc_one, color=~congested_pal(ABCONGTIME),
popup = paste("Road Name: ", add_fc_one$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_one$ABCONGTIME
),
group="AB Cong. Time"
)%>%
addPolylines(data=add_fc_one, color=~congested_pal(BACONGTIME),
popup = paste("Road Name: ", add_fc_one$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_one$BACONGTIME
),
group="BA Cong. Time"
)%>%
addPolylines(data=add_fc_two, color=~pal(TOTDLYVOL),
popup = paste("Road Name: ", add_fc_two$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_two$TOTDLYVOL
),
group="Major Arterial"
)%>%
addPolylines(data=add_fc_three, color=~pal(TOTDLYVOL),
popup = paste("Road Name: ", add_fc_three$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_three$TOTDLYVOL
),
group="Minor Arterial"
)%>%
addLegend("bottomright",
pal=pal,
value=pref_opt$TOTDLYVOL,
group="Volume",
title="Total Daily Volume") %>%
addLegend("bottomleft",
pal=congested_pal,
value=pref_opt$BACONGTIME,
group="BA Cong.Time ",
title="Congested Time") %>%
addLayersControl(baseGroups = c("AB Cong. Time", "BA Cong. Time", "Volume"),
overlayGroups = c("Freeways", "Major Arterial", "Minor Arterial"),
options = layersControlOptions(collapsed = TRUE))
a %>% hideGroup("Major Arterial") %>% hideGroup("Minor Arterial")
congested_bins <- c(0,1,3,5, 7, 10)
congested_pal <- colorBin(
palette = "YlOrRd", na.color = "#808080",
bins=congested_bins,
domain = trm_2016$ABCONGTIME)
add_fc_one <- trm_2016 %>%
filter(FCGROUP==1)
add_fc_one <- st_as_sf(add_fc_one)
add_fc_two <- trm_2016 %>%
filter(FCGROUP==2)
add_fc_three <- trm_2016 %>%
filter(FCGROUP==3)
add_fc_four <- trm_2016 %>%
filter(FCGROUP==4)
add_fc_five <- trm_2016 %>%
filter(FCGROUP==5)
add_fc_999 <- trm_2016 %>%
filter(FCGROUP==999)
bins <- c(0,1000,5000,20000, 50000,100000,200000)
pal <- colorBin(
palette = "YlOrRd", na.color = "#808080",
bins=bins,
domain = trm_2016$TOTDLYVOL)
# risk.bins <-c(0, 0.55, 0.65, 0.75, 0.85, 0.95, 1.0),
# risk.pal <- colorBin( "YlOrRd", bins=risk.bins, na.color = "#aaff56")
a <- leaflet()%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(data=add_fc_one, color=~pal(TOTDLYVOL),
popup = paste("Road Name: ", add_fc_one$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_one$TOTDLYVOL
),
group="Freeways"
)%>%
addPolylines(data=add_fc_one, color=~congested_pal(ABCONGTIME),
popup = paste("Road Name: ", add_fc_one$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_one$ABCONGTIME
),
group="AB Cong. Time"
)%>%
addPolylines(data=add_fc_one, color=~congested_pal(BACONGTIME),
popup = paste("Road Name: ", add_fc_one$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_one$BACONGTIME
),
group="BA Cong. Time"
)%>%
addPolylines(data=add_fc_two, color=~pal(TOTDLYVOL),
popup = paste("Road Name: ", add_fc_two$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_two$TOTDLYVOL
),
group="Major Arterial"
)%>%
addPolylines(data=add_fc_three, color=~pal(TOTDLYVOL),
popup = paste("Road Name: ", add_fc_three$ROADNAME , "<br>",
"Total Daily Volume: ", add_fc_three$TOTDLYVOL
),
group="Minor Arterial"
)%>%
addLegend("bottomright",
pal=pal,
value=trm_2016$TOTDLYVOL,
group="Volume",
title="Total Daily Volume") %>%
addLegend("bottomleft",
pal=congested_pal,
value=trm_2016$BACONGTIME,
group="BA Cong.Time ",
title="Congested Time (Minutes)") %>%
addLayersControl(baseGroups = c("AB Cong. Time", "BA Cong. Time", "Volume"),
overlayGroups = c("Freeways", "Major Arterial", "Minor Arterial"),
options = layersControlOptions(collapsed = TRUE))
a %>% hideGroup("Major Arterial") %>% hideGroup("Minor Arterial")
bins <- c(0,0.5,1,1.5, 2, 2.5, 3, 3.5)
# pal <- colorBin(
#   palette = "YlOrRd", na.color = "#808080",
#   bins=bins,
#   domain = vc_2016$DLY_vc_2016)
US70_words <- c("70", 70, "US 70", "US70")
vc_2016$US70Tag <- case_when(
grepl(US70_words, vc_2016$ROADNAME) ~ 1,
)
interstates_express <- vc_2016 %>%
filter(vc_2016$FCLASS==11 | vc_2016$FCLASS==12|vc_2016$FCLASS==21)
maj_arterials <- vc_2016 %>%
filter(vc_2016$FCLASS==13 | vc_2016$FCLASS==22)
min_arterials <- vc_2016 %>%
filter(vc_2016$FCLASS==14 | vc_2016$FCLASS==23)
locals  <- vc_2016 %>%
filter(vc_2016$FCLASS==15| vc_2016$FCLASS==16 | vc_2016$FCLASS==24 | vc_2016$FCLASS==25|vc_2016$FCLASS==26)
us70  <- vc_2016 %>%
filter(vc_2016$US70Tag==1)
# pal <- colorNumeric(
#   palette = "YlOrRd", na.color = "#808080",
# #  bins=bins,
#   domain = vc_2016$DLY_vc_2016)
pal <- colorNumeric(c("green", "yellow", "red"), 0:2)
a <- leaflet()%>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-78.83778764614695, 35.94942355920982, zoom=11) %>%
##US 70
addPolylines(data=us70, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", us70$ROADNAME , "<br>",
"Total Daily Volume: ", us70$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", us70$DLY_vc_2016
),
group="US70",
) %>%
addLegend("bottomright",
pal=pal,
value=us70$DLY_vc_2016,
#  label="2020 HH",
#  group="US70",
title="Volume-to-Capacity Ratio") %>%
##Freeways
addPolylines(data=interstates_express, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", interstates_express$ROADNAME , "<br>",
"Total Daily Volume: ", interstates_express$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", interstates_express$DLY_vc_2016
),
group="Freeways",
) %>%
##Major Arterials
addPolylines(data=maj_arterials, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", maj_arterials$ROADNAME , "<br>",
"Total Daily Volume: ", maj_arterials$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", maj_arterials$DLY_vc_2016
),
group="Major Arterial",
) %>%
##Minor Arterials
addPolylines(data=min_arterials, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", min_arterials$ROADNAME , "<br>",
"Total Daily Volume: ", min_arterials$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", min_arterials$DLY_vc_2016
),
group="Minor Arterial",
) %>%
##Locals
addPolylines(data=locals, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", locals$ROADNAME , "<br>",
"Total Daily Volume: ", locals$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", locals$DLY_vc_2016
),
group="Locals",
) %>%
addPolylines(data=vc_2016, color=~pal(DLY_vc_2016),
popup = paste("Road Name: ", vc_2016$ROADNAME , "<br>",
"Total Daily Volume: ", vc_2016$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", vc_2016$DLY_vc_2016
),
group="All",
) %>%
addLayersControl( baseGroups = c("All","Freeways","Major Arterial", "Minor Arterial", "Locals", "US70"),
options = layersControlOptions(collapsed = TRUE))
summary(vc_2016$VOC)
bins <- c(0,0.5,1,1.5, 2, 2.5, 3)
# pal <- colorBin(
#   palette = "YlOrRd", na.color = "#808080",
#   bins=bins,
#   domain = vc_2016$VOC)
US70_words <- c("70", 70, "US 70", "US70")
vc_2016$US70Tag <- case_when(
grepl(US70_words, vc_2016$ROADNAME) ~ 1,
)
interstates_express <- vc_2016 %>%
filter(vc_2016$FCLASS==11 | vc_2016$FCLASS==12|vc_2016$FCLASS==21)
maj_arterials <- vc_2016 %>%
filter(vc_2016$FCLASS==13 | vc_2016$FCLASS==22)
min_arterials <- vc_2016 %>%
filter(vc_2016$FCLASS==14 | vc_2016$FCLASS==23)
locals  <- vc_2016 %>%
filter(vc_2016$FCLASS==15| vc_2016$FCLASS==16 | vc_2016$FCLASS==24 | vc_2016$FCLASS==25|vc_2016$FCLASS==26)
us70  <- vc_2016 %>%
filter(vc_2016$US70Tag==1)
# pal <- colorNumeric(
#   palette = "YlOrRd", na.color = "#808080",
# #  bins=bins,
#   domain = vc_2016$VOC)
pal <- colorNumeric(c("green", "yellow", "red"), 0:2)
a <- leaflet()%>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-78.83778764614695, 35.94942355920982, zoom=11) %>%
##US 70
addPolylines(data=us70, color=~pal(vc_2016$VOC),
popup = paste("Road Name: ", us70$ROADNAME , "<br>",
"Total Daily Volume: ", us70$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", us70$VOC
),
group="US70",
) %>%
addLegend("bottomright",
pal=pal,
value=us70$VOC,
#  label="2020 HH",
#  group="US70",
title="Volume-to-Capacity Ratio") %>%
##Freeways
addPolylines(data=interstates_express, color=~pal(VOC),
popup = paste("Road Name: ", interstates_express$ROADNAME , "<br>",
"Total Daily Volume: ", interstates_express$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", interstates_express$VOC
),
group="Freeways",
) %>%
##Major Arterials
addPolylines(data=maj_arterials, color=~pal(VOC),
popup = paste("Road Name: ", maj_arterials$ROADNAME , "<br>",
"Total Daily Volume: ", maj_arterials$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", maj_arterials$VOC
),
group="Major Arterial",
) %>%
##Minor Arterials
addPolylines(data=min_arterials, color=~pal(VOC),
popup = paste("Road Name: ", min_arterials$ROADNAME , "<br>",
"Total Daily Volume: ", min_arterials$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", min_arterials$VOC
),
group="Minor Arterial",
) %>%
##Locals
addPolylines(data=locals, color=~pal(VOC),
popup = paste("Road Name: ", locals$ROADNAME , "<br>",
"Total Daily Volume: ", locals$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", locals$VOC
),
group="Locals",
) %>%
addPolylines(data=vc_2016, color=~pal(VOC),
popup = paste("Road Name: ", vc_2016$ROADNAME , "<br>",
"Total Daily Volume: ", vc_2016$TOTDLYVOL, "<br>",
"Total V-C Ratio: ", vc_2016$VOC
),
group="All",
) %>%
addLayersControl( baseGroups = c("All","Freeways","Major Arterial", "Minor Arterial", "Locals", "US70"),
options = layersControlOptions(collapsed = TRUE))
a
library(flexdashboard)
library(xlsx)
library(readxl)
library(plotly)
library(sf)
library(dplyr)
library(tidygeocoder)
library(leaflet)
library(rgdal)
library(readxl)
library(sp)
library(ggplot2)
library(caliperR)
library(tcadr)
pref_opt <- st_read("C:/Users/JacobFo/OneDrive - City of Durham/MTP Work/Pref Opt Hwy Line/Highway/Hwy Line.shp") %>%
select(ID, COUNTY, FCGROUP, TOTDLYVOL, TOTAMVOL, TOTPMVOL, ROADNAME, COUNTY, ABCONGTIME, BACONGTIME, SPECIAL)
trm_2016 <- st_read("C:/Users/JacobFo/OneDrive - City of Durham/Full Model Runs/Original TRMv6.2_2016 - Copy/Input/Highway/Hwy Line.shp") %>%  select(ID, COUNTY, FCGROUP, TOTDLYVOL, TOTAMVOL, TOTPMVOL, ROADNAME, COUNTY, ABCONGTIME, BACONGTIME,SPECIAL)
g <- read_bin("C:/Users/JacobFo/TRMG2_v0.1/scenarios/base_2016/output/networks/scenario_links.bin") %>%
select(ID, RoadNAme, Total_Flow_Daily, Total_VMT_Daily)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("backports", "blob", "broom", "cli", "clipr", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dichromat", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "fansi", "fs", "generics", "geosphere", "ggplot2", "glue", "haven", "hms", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lubridate", "lwgeom", "magrittr", "mime", "openssl", "openxlsx", "packrat", "plotly", "plyr", "processx", "proxy", "ps", "R6", "raster", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "rsconnect", "rvest", "s2", "scales", "sf", "sp", "stars", "stringi", "svglite", "systemfonts", "tidyr", "tidyselect", "tinytex", "tzdb", "units", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "XLConnect", "XML", "xml2", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages(c("digest", "htmltools", "RCurl", "rlang", "xfun", "yaml"))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
remove.packages("digest")
remove.packages("htmltools")
remove.packages("RCurl")
install.packages("htmltools")
install.packages("htmltools")
q()
install.packages(c("proxy", "RCurl", "terra"))
sessionInfo()
replacement <- function(category = "LC_ALL") {
if (identical(category, "LC_MESSAGES"))
return("")
category <- match(category, .LC.categories)
if (is.na(category))
stop("invalid 'category' argument")
.Internal(Sys.getlocale(category))
}
base <- asNamespace("base")
environment(replacement) <- base
unlockBinding("Sys.getlocale", base)
assign("Sys.getlocale", replacement, envir = base)
lockBinding("Sys.getlocale", base)
library(rJava)
rJava::.jinit()
library(flexdashboard)
library(xlsx)
library(readxl)
library(sf)
library(leaflet)
library(rgdal)
library(sp)
library(ggplot2)
library(tcadr)
library(caliperR)
library(tcadr)
library(janitor)
library(data.table)
library(dplyr)
library(ggpmisc)
library(plotly)
library(data.table)
library(knitr)
library(scales)
temp <-  read_tcad("C:/Work/Jake/scenario_links.bin") %>%
filter(Total_Flow_Daily > 0) %>%
select(ID, RoadName, HCMType, DailyCount, Total_Flow_Daily, Total_VMT_Daily, Total_Delay_Daily, County, Max_VOC_PM, Max_VOC_AM, AreaType, MPO,Tot_Flow_AM, Tot_Flow_PM, Total_VHT_Daily)
g2_geo <-  st_read("C:/Work/Jake/scenario_links.shp")
g2_geo <- g2_geo %>%
filter(g2_geo$ID %in% temp$ID)
g2 <- cbind(temp, g2_geo)
g2$County <- tolower(g2$County)
g2 <- g2 %>%
mutate(
Total_Flow_Daily = round(Total_Flow_Daily,0),
Tot_Flow_PM = round(Tot_Flow_PM, 0),
Tot_Flow_AM = round(Tot_Flow_AM, 0)
)
g2 <- g2 %>%
mutate(
Tot_Flow_Daily = round(Total_Flow_Daily,0),
Tot_Flow_PM = round(Tot_Flow_PM, 0),
Tot_Flow_AM = round(Tot_Flow_AM, 0)
)
g2 <- g2 %>%
mutate(
Tot_Flow_Daily = round(Total_Flow_Daily,0)
)
temp <-  read_tcad("C:/Work/Jake/scenario_links.bin") %>%
filter(Total_Flow_Daily > 0) %>%
select(ID, RoadName, HCMType, DailyCount, Total_Flow_Daily, Total_VMT_Daily, Total_Delay_Daily, County, Max_VOC_PM, Max_VOC_AM, AreaType, MPO,Tot_Flow_AM, Tot_Flow_PM, Total_VHT_Daily)%>%
mutate(
Tot_Flow_Daily = round(Total_Flow_Daily,0),
Tot_Flow_PM = round(Tot_Flow_PM, 0),
Tot_Flow_AM = round(Tot_Flow_AM, 0)
)
g2_geo <-  st_read("C:/Work/Jake/scenario_links.shp")
g2_geo <- g2_geo %>%
filter(g2_geo$ID %in% temp$ID)
g2 <- cbind(temp, g2_geo)
g2$County <- tolower(g2$County)
temp <- read_tcad("C:/Work/Jake/scenario_se.bin") %>%
filter(Type !="External")
get_counties <-read_tcad("C:/Work/Jake/master_tazs.bin") %>% select(TAZ = ID,  County)
se_2020 <- merge(temp, get_counties)
se_2020$County <- tolower(se_2020$County)
##
##v <- st_read("C:/Users/JacobFo/OneDrive - City of Durham/Full Model Runs/Original TRMv6.2_2016/Input/Highway/Hwy Line.shp")
##Add VMT field
##v$ToT_VMT <- (v$ABAMVMT+ v$ABMDVMT+ v$ABNTVMT+ v$ABPMVMT+v$BAAMVMT+v$BAMDVMT+ v$BANTVMT+ v$BAPMVMT)
##get rid of NA values, set to zero:
##v[is.na(v)]<-0
##v$COUNTY <- tolower(v$COUNTY)
##Add Daily Counts file:
##v_counts <- read_tcad("C:/Users/JacobFo/OneDrive - City of Durham/Full Model Runs/Original TRMv6.2_2016/EvalModule/TRM6_Count_2016_Observed.bin") %>%
##  select(ID, Daily_Counts=Daily.Counts)
##Final TRMv6.2 line layer with counts
##add_counts <- left_join(v, v_counts)
g2 <- st_as_sf(g2)
TLHighway <- g2 %>%
filter(HCMType=="TLHighway")
TLHighway <- st_as_sf(TLHighway)
MajorCollector <- g2 %>%
filter(HCMType=="MajorCollector")
MajorCollector <- st_as_sf(MajorCollector)
Collector <- g2 %>%
filter(HCMType=="Collector")
Collector <- st_as_sf(Collector)
MLHighway <- g2 %>%
filter(HCMType=="MLHighway")
MLHighway <- st_as_sf(MLHighway)
MajorArterial <- g2 %>%
filter(HCMType=="MajorArterial")
MajorArterial <- st_as_sf(MajorArterial)
Arterial <- g2 %>%
filter(HCMType=="Arterial")
Arterial <- st_as_sf(Arterial)
Freeway <- g2 %>%
filter(HCMType=="Freeway")
Freeway <- st_as_sf(Freeway)
#colores <- c('grey', 'lightgreen', 'pink', 'green', 'blue', 'orange', 'red',  'darkred')
bins = c(0,2500,5000,10000,25000,50000,125000)
volume_pal <- colorBin(palette="YlOrRd", na.color="#808080", domain=g2$Total_Flow_Daily, bins = bins)
vol_map <- leaflet()%>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-78.86818828690794, 35.90135612029049, zoom = 8.5) %>%
addPolylines(data=TLHighway,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
"Total Flow: ", TLHighway$Total_Flow_Daily
),
weight = log(TLHighway$Total_Flow_Daily)/5,
group="TLHighway") %>%
addPolylines(data=MajorCollector,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
"Total Flow: ", MajorCollector$Total_Flow_Daily
),
weight = log(MajorCollector$Total_Flow_Daily)/5,
group="MajorCollector") %>%
addPolylines(data=Collector,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", Collector$RoadName , "<br>",
"Total Flow: ", Collector$Total_Flow_Daily
),
weight = log(Collector$Total_Flow_Daily)/5,
group="Collector") %>%
addPolylines(data=MLHighway,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
"Total Flow: ", MLHighway$Total_Flow_Daily
),
weight = log(MLHighway$Total_Flow_Daily)/4,
group="MLHighway") %>%
addPolylines(data=Arterial,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", Arterial$RoadName , "<br>",
"Total Flow: ", Arterial$Total_Flow_Daily
),
weight = log(Arterial$Total_Flow_Daily)/4,
group="Arterial") %>%
addPolylines(data=MajorArterial,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
"Total Flow: ", MajorArterial$Total_Flow_Daily
),
weight = log(MajorArterial$Total_Flow_Daily)/4,
group="MajorArterial") %>%
addPolylines(data=Freeway,color=~volume_pal(Total_Flow_Daily),
popup = paste("Road Name: ", Freeway$RoadName , "<br>",
"Total Flow: ", Freeway$Total_Flow_Daily
),
weight = log(Freeway$Total_Flow_Daily)/3,
group="Freeway") %>%
addLegend("bottomright",
pal=volume_pal,
value=g2$Total_Flow_Daily,
#  group="Freeways",
title="Volume") %>%
addLayersControl(overlayGroups = c("TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
options = layersControlOptions(collapsed = TRUE))
896
vol_map  %>%hideGroup("TLHighway") %>%hideGroup("MajorCollector") %>% hideGroup("Collector")
View(Freeway)
