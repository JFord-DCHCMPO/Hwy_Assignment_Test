---
title: "Triangle Regional Model Highway Metrics"
author: "Jacob Ford DCHC MPO"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    theme:
       version: 5

---




```{r setup, include=FALSE}
library(flexdashboard)
library(xlsx)
library(readxl)
library(sf)
library(leaflet)
library(rgdal)
library(sp)
library(ggplot2)
library(tcadr)
library(caliperR)
library(tcadr)
library(janitor)
library(data.table)
library(dplyr)
library(ggpmisc)
library(plotly)
library(data.table)
library(knitr)


temp <-  read_tcad("C:/Users/JacobFo/TRMG2_v0.2/scenarios/base_2016/output/networks/scenario_links.bin") %>%
  filter(Total_Flow_Daily > 0) %>%
  select(ID, RoadName, HCMType, DailyCount, Total_Flow_Daily, Total_VMT_Daily, Total_Delay_Daily, County, Max_VOC_PM, Max_VOC_AM, AreaType, MPO,
         Tot_Flow_AM, Tot_Flow_PM)

g2_geo <-  st_read("C:/Users/JacobFo/TRMG2_v0.2/scenarios/base_2016/output/networks/scenario_links.shp")

g2_geo <- g2_geo %>%
  filter(g2_geo$ID1 %in% temp$ID)

g2 <- cbind(temp, g2_geo)



g2$County <- tolower(g2$County)


v <- st_read("C:/Users/JacobFo/OneDrive - City of Durham/Full Model Runs/Original TRMv6.2_2016 - Copy/Input/Highway/Hwy Line.shp") 

##Add VMT field
v$ToT_VMT <- (v$ABAMVMT+ v$ABMDVMT+ v$ABNTVMT+ v$ABPMVMT+v$BAAMVMT+v$BAMDVMT+ v$BANTVMT+ v$BAPMVMT)


##get rid of NA values, set to zero:

v[is.na(v)]<-0

v$COUNTY <- tolower(v$COUNTY)


##Add Daily Counts file: 
v_counts <- read_tcad("C:/Users/JacobFo/OneDrive - City of Durham/Full Model Runs/Original TRMv6.2_2016 - Copy/EvalModule/TRM6_Count_2016_Observed.bin") %>%
  select(ID, Daily_Counts)


##Final TRMv6.2 line layer with counts
add_counts <- left_join(v, v_counts)

g2 <- st_as_sf(g2)

local <- g2 %>%
  filter(HCMType=="Local")

local <- st_as_sf(local)

TLHighway <- g2 %>%
  filter(HCMType=="TLHighway")

TLHighway <- st_as_sf(TLHighway)

MajorCollector <- g2 %>%
  filter(HCMType=="MajorCollector")

MajorCollector <- st_as_sf(MajorCollector)

Collector <- g2 %>%
  filter(HCMType=="Collector")

Collector <- st_as_sf(Collector)

MLHighway <- g2 %>%
  filter(HCMType=="MLHighway")

MLHighway <- st_as_sf(MLHighway)

MajorArterial <- g2 %>%
  filter(HCMType=="MajorArterial")

MajorArterial <- st_as_sf(MajorArterial)

Arterial <- g2 %>%
  filter(HCMType=="Arterial")

Arterial <- st_as_sf(Arterial)

Freeway <- g2 %>%
  filter(HCMType=="Freeway")

Freeway <- st_as_sf(Freeway)


```


Highway Assignment Maps {data-icon="ion-android-globe"}
=====================================  


Inputs {.sidebar}
-----------------------------------------------------------------------
Congestion and Volume are important metrics in determining travel demand in a region. The maps here show the 2050 and 2016 base year congestion and total volume. 

Congestion is shown as minutes for the 2050 Preferred Option and 2016 base year networks (only AB Congestion for now). 

Total volume is shown as total daily volume by time of day. 


Row 
-----------------------------------------------------------------------



### Daily Volume

```{r echo=FALSE, message=FALSE, warning=FALSE}


volume_pal <- colorBin(palette="YlOrRd", na.color="#808080", domain=g2$Total_Flow_Daily)


vol_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "Total Flow: ", local$Total_Flow_Daily
                            ),
              weight = log(local$Total_Flow_Daily), 
              group="Local") %>%
  addPolylines(data=TLHighway,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "Total Flow: ", TLHighway$Total_Flow_Daily
                            ),
              weight = log(TLHighway$Total_Flow_Daily), 
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "Total Flow: ", MajorCollector$Total_Flow_Daily
                            ),
              weight = log(MajorCollector$Total_Flow_Daily), 
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "Total Flow: ", Collector$Total_Flow_Daily
                            ),
              weight = log(Collector$Total_Flow_Daily), 
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "Total Flow: ", MLHighway$Total_Flow_Daily
                            ),
              weight = log(MLHighway$Total_Flow_Daily), 
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "Total Flow: ", Arterial$Total_Flow_Daily
                            ),
              weight = log(Arterial$Total_Flow_Daily), 
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "Total Flow: ", MajorArterial$Total_Flow_Daily
                            ),
              weight = log(MajorArterial$Total_Flow_Daily), 
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~volume_pal(Total_Flow_Daily),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "Total Flow: ", Freeway$Total_Flow_Daily
                            ),
              weight = log(Freeway$Total_Flow_Daily), 
              group="Freeway") %>%


      addLegend("bottomright",
            pal=volume_pal,
            value=g2$Total_Flow_Daily,
         #   group="Freeways AM",
            title="Volume") %>%
  
  

  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


vol_map 
```



Row {data-height=850}
-----------------------------------------------------------------------



### PM Volume

```{r echo=FALSE, message=FALSE, warning=FALSE}


volume_pal <- colorBin(palette="YlOrRd", na.color="#808080", domain=g2$Tot_Flow_PM)


vol_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "Total PM Flow: ", local$Tot_Flow_PM
                            ),
              weight = log(local$Tot_Flow_PM), 
              group="Local") %>%
  addPolylines(data=TLHighway,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "Total PM Flow: ", TLHighway$Tot_Flow_PM
                            ),
              weight = log(TLHighway$Tot_Flow_PM), 
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "Total PM Flow: ", MajorCollector$Tot_Flow_PM
                            ),
              weight = log(MajorCollector$Tot_Flow_PM), 
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "Total PM Flow: ", Collector$Tot_Flow_PM
                            ),
              weight = log(Collector$Tot_Flow_PM), 
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "Total PM Flow: ", MLHighway$Tot_Flow_PM
                            ),
              weight = log(MLHighway$Tot_Flow_PM), 
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "Total PM Flow: ", Arterial$Tot_Flow_PM
                            ),
              weight = log(Arterial$Tot_Flow_PM), 
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "Total PM Flow: ", MajorArterial$Tot_Flow_PM
                            ),
              weight = log(MajorArterial$Tot_Flow_PM), 
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~volume_pal(Tot_Flow_PM),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "Total PM Flow: ", Freeway$Tot_Flow_PM
                            ),
              weight = log(Freeway$Tot_Flow_PM), 
              group="Freeway") %>%


      addLegend("bottomright",
            pal=volume_pal,
            value=g2$Tot_Flow_PM,
         #   group="Freeways AM",
            title="PM Volume") %>%
  
  

  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


vol_map 
```






### AM Volume

```{r echo=FALSE, message=FALSE, warning=FALSE}


volume_pal <- colorBin(palette="YlOrRd", na.color="#808080", domain=g2$Tot_Flow_AM)


vol_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "Total AM Flow: ", local$Tot_Flow_AM
                            ),
              weight = log(local$Tot_Flow_AM), 
              group="Local") %>%
  addPolylines(data=TLHighway,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "Total AM Flow: ", TLHighway$Tot_Flow_AM
                            ),
              weight = log(TLHighway$Tot_Flow_AM), 
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "Total AM Flow: ", MajorCollector$Tot_Flow_AM
                            ),
              weight = log(MajorCollector$Tot_Flow_AM), 
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "Total AM Flow: ", Collector$Tot_Flow_AM
                            ),
              weight = log(Collector$Tot_Flow_AM), 
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "Total AM Flow: ", MLHighway$Tot_Flow_AM
                            ),
              weight = log(MLHighway$Tot_Flow_AM), 
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "Total AM Flow: ", Arterial$Tot_Flow_AM
                            ),
              weight = log(Arterial$Tot_Flow_AM), 
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "Total AM Flow: ", MajorArterial$Tot_Flow_AM
                            ),
              weight = log(MajorArterial$Tot_Flow_AM), 
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~volume_pal(Tot_Flow_AM),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "Total AM Flow: ", Freeway$Tot_Flow_AM
                            ),
              weight = log(Freeway$Tot_Flow_AM), 
              group="Freeway") %>%


      addLegend("bottomright",
            pal=volume_pal,
            value=g2$Tot_Flow_AM,
         #   group="Freeways AM",
            title="AM Volume") %>%
  
  

  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


vol_map 
```












Volume to Capacity Ratio {data-icon="ion-car-outline"}
=====================================  




Inputs {.sidebar}
-----------------------------------------------------------------------

Volume-to-Capacity is a ratio measuring the demand against the supply of a highway link. 


Row 
-----------------------------------------------------------------------



### Congested Time
 

```{r echo=FALSE, message=FALSE, warning=FALSE}



congested_bins <- c(0,1,3,5, 7, 10)

congested_pal <- colorBin(
  palette = "YlOrRd", na.color = "#808080",
#  bins=congested_bins,
  domain = g2$Total_Delay_Daily)



cong_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "Total Delay: ", local$Total_Delay_Daily
                            ),
                 group="Local") %>%
  addPolylines(data=TLHighway,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "Total Delay: ", TLHighway$Total_Delay_Daily
                            ),
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "Total Delay: ", MajorCollector$Total_Delay_Daily
                            ),
             # size=MajorCollector$Total_Flow_Daily,
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "Total Delay: ", Collector$Total_Delay_Daily
                            ),
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "Total Delay: ", MLHighway$Total_Delay_Daily
                            ),
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "Total Delay: ", Arterial$Total_Delay_Daily
                            ),
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "Total Delay: ", MajorArterial$Total_Delay_Daily
                            ),
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~congested_pal(Total_Delay_Daily),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "Total Delay: ", Freeway$Total_Delay_Daily
                            ),
              group="Freeway") %>%



      addLegend("bottomright",
            pal=congested_pal,
            value=g2$Total_Delay_Daily,
         #   group="Freeways AM",
            title="Delay") %>%
  
  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


cong_map
```






Row
-----------------------------------------------------------------------


### AM VOC

```{r echo=FALSE, message=FALSE, warning=FALSE}



congested_bins <- c(0,1,3,5, 7, 10)

congested_pal <- colorBin(
  palette = "YlOrRd", na.color = "#808080",
#  bins=congested_bins,
  domain = g2$Max_VOC_AM)


cong_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "AM VOC: ", local$Max_VOC_AM
                            ),
                 group="Local") %>%
  addPolylines(data=TLHighway,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "AM VOC: ", TLHighway$Max_VOC_AM
                            ),
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "AM VOC: ", MajorCollector$Max_VOC_AM
                            ),
             # size=MajorCollector$Total_Flow_Daily,
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "AM VOC: ", Collector$Max_VOC_AM
                            ),
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "AM VOC: ", MLHighway$Max_VOC_AM
                            ),
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "AM VOC: ", Arterial$Max_VOC_AM
                            ),
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "AM VOC: ", MajorArterial$Max_VOC_AM
                            ),
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~congested_pal(Max_VOC_AM),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "AM VOC: ", Freeway$Max_VOC_AM
                            ),
              group="Freeway") %>%



      addLegend("bottomright",
            pal=congested_pal,
            value=g2$Max_VOC_AM,
         #   group="Freeways AM",
            title="AM VOC") %>%
  
  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


cong_map
```




### PM VOC

```{r echo=FALSE, message=FALSE, warning=FALSE}





congested_bins <- c(0,1,3,5, 7, 10)

congested_pal <- colorBin(
  palette = "YlOrRd", na.color = "#808080",
#  bins=congested_bins,
  domain = g2$Max_VOC_PM)


cong_map <- leaflet()%>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  
  addPolylines(data=local,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", local$RoadName , "<br>",
                            "PM VOC: ", local$Max_VOC_PM
                            ),
                 group="Local") %>%
  addPolylines(data=TLHighway,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", TLHighway$RoadName , "<br>",
                            "PM VOC: ", TLHighway$Max_VOC_PM
                            ),
              group="TLHighway") %>%
  
  addPolylines(data=MajorCollector,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", MajorCollector$RoadName , "<br>",
                            "PM VOC: ", MajorCollector$Max_VOC_PM
                            ),
             # size=MajorCollector$Total_Flow_Daily,
              group="MajorCollector") %>%
  addPolylines(data=Collector,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", Collector$RoadName , "<br>",
                            "PM VOC: ", Collector$Max_VOC_PM
                            ),
              group="Collector") %>%
  addPolylines(data=MLHighway,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", MLHighway$RoadName , "<br>",
                            "PM VOC: ", MLHighway$Max_VOC_PM
                            ),
              group="MLHighway") %>%
  
  addPolylines(data=Arterial,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", Arterial$RoadName , "<br>",
                            "PM VOC: ", Arterial$Max_VOC_PM
                            ),
              group="Arterial") %>%
  addPolylines(data=MajorArterial,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", MajorArterial$RoadName , "<br>",
                            "PM VOC: ", MajorArterial$Max_VOC_PM
                            ),
              group="MajorArterial") %>%
  addPolylines(data=Freeway,color=~congested_pal(Max_VOC_PM),  
              popup = paste("Road Name: ", Freeway$RoadName , "<br>",
                            "PM VOC: ", Freeway$Max_VOC_PM
                            ),
              group="Freeway") %>%



      addLegend("bottomright",
            pal=congested_pal,
            value=g2$Max_VOC_PM,
         #   group="Freeways AM",
            title="AM VOC") %>%
  
  
  addLayersControl(baseGroups = c("Local", "TLHighway", "MajorCollector", "Collector", "MLHighway", "Arterial","MajorArterial",'Freeway'),
                   options = layersControlOptions(collapsed = TRUE))


cong_map


```

































Graphs {data-icon="ion-stats-bars"}
=====================================  



Column {.tabset}
-----------------------------------------------------------------------

### Total Volume

```{r echo=FALSE, message=FALSE, warning=FALSE}

temp2 <- g2 %>%
  group_by(County) %>%
  filter(DailyCount > 0) %>%
  filter(County != "") %>% ##filters empty space for tagged links with no counties 
  summarise(
    temp = sum(Total_Flow_Daily, na.rm=T)) %>%
  arrange(County) %>%
  mutate(Output= "Total Flow")

temp <- g2 %>%
  group_by(County) %>%
  filter(DailyCount > 0) %>%
  filter(County != "") %>% ##filters empty space for tagged links with no counties 
  summarise(
    temp = sum(Total_VMT_Daily, na.rm=T)) %>%
  arrange(County)%>%
  mutate(Output= "VMT")

joined <- rbind(temp, temp2)




p <- ggplot(data=joined, aes(x=reorder(County, -temp), y=temp, fill = Output)) +geom_bar(stat='identity', position='dodge') + theme_classic() + xlab('')+ ggtitle("County Level Totals")+ theme(axis.text.x=element_text(angle = -45, hjust = 0))

ggplotly(p) 


```


### TRM 2016 Dly Vol by County

```{r echo=FALSE, message=FALSE, warning=FALSE}




```

### Both Totl Dly Vol

```{r echo=FALSE, message=FALSE, warning=FALSE}





```














